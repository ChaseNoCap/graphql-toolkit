// Core interfaces
export interface ICacheOptions {
  ttl?: number; // Time to live in milliseconds
  key?: (...args: any[]) => string; // Custom key generator
  condition?: (...args: any[]) => boolean; // Conditional caching
}

export interface ICache {
  get(key: string): any;
  set(key: string, value: any, ttl?: number): void;
  has(key: string): boolean;
  delete(key: string): boolean;
  clear(): void;
  size(): number;
}

// Cache entry with metadata
interface CacheEntry {
  value: any;
  expiry: number;
}

// In-memory cache implementation
export class MemoryCache implements ICache {
  private cache = new Map<string, CacheEntry>();
  private readonly defaultTTL: number;

  constructor(defaultTTL: number = 60000) {
    this.defaultTTL = defaultTTL;
  }

  get(key: string): any {
    const entry = this.cache.get(key);
    if (!entry) {
      return undefined;
    }

    // Check if expired
    if (Date.now() > entry.expiry) {
      this.cache.delete(key);
      return undefined;
    }

    return entry.value;
  }

  set(key: string, value: any, ttl?: number): void {
    const expiry = Date.now() + (ttl ?? this.defaultTTL);
    this.cache.set(key, { value, expiry });
  }

  has(key: string): boolean {
    const value = this.get(key);
    return value !== undefined;
  }

  delete(key: string): boolean {
    return this.cache.delete(key);
  }

  clear(): void {
    this.cache.clear();
  }

  size(): number {
    // Clean up expired entries first
    const now = Date.now();
    for (const [key, entry] of Array.from(this.cache.entries())) {
      if (now > entry.expiry) {
        this.cache.delete(key);
      }
    }
    return this.cache.size;
  }
}

// Global cache instance
const globalCache = new MemoryCache();

// Cacheable decorator
export function Cacheable(options: ICacheOptions = {}) {
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value;
    const { ttl, key: keyGenerator, condition } = options;

    descriptor.value = async function (...args: any[]) {
      // Check condition if provided
      if (condition && !condition(...args)) {
        return originalMethod.apply(this, args);
      }

      // Generate cache key
      const cacheKey = keyGenerator 
        ? keyGenerator(...args)
        : `${target.constructor.name}.${propertyKey}:${JSON.stringify(args)}`;

      // Check cache
      const cached = globalCache.get(cacheKey);
      if (cached !== undefined) {
        return cached;
      }

      // Execute method
      const result = await originalMethod.apply(this, args);

      // Cache result
      globalCache.set(cacheKey, result, ttl);

      return result;
    };

    return descriptor;
  };
}

// InvalidateCache decorator
export function InvalidateCache(keyGenerator?: (...args: any[]) => string | string[]) {
  return function (_target: any, _propertyKey: string, descriptor: PropertyDescriptor) {
    const originalMethod = descriptor.value;

    descriptor.value = async function (...args: any[]) {
      // Execute method first
      const result = await originalMethod.apply(this, args);

      // Invalidate cache
      if (keyGenerator) {
        const keys = keyGenerator(...args);
        if (Array.isArray(keys)) {
          keys.forEach(key => globalCache.delete(key));
        } else {
          globalCache.delete(keys);
        }
      } else {
        // Clear all cache for this class if no key generator provided
        // Note: This is a simple implementation. In production, 
        // we'd want to track keys more efficiently
        globalCache.clear(); // For simplicity, clear all
      }

      return result;
    };

    return descriptor;
  };
}

// Cache management utilities
export const CacheManager = {
  clear: () => globalCache.clear(),
  size: () => globalCache.size(),
  get: (key: string) => globalCache.get(key),
  set: (key: string, value: any, ttl?: number) => globalCache.set(key, value, ttl),
  delete: (key: string) => globalCache.delete(key),
  has: (key: string) => globalCache.has(key)
};

// Re-export types
export type { ICacheOptions as CacheOptions };