export interface ICacheOptions {
    ttl?: number;
    key?: (...args: any[]) => string;
    condition?: (...args: any[]) => boolean;
}
export interface ICache {
    get(key: string): any;
    set(key: string, value: any, ttl?: number): void;
    has(key: string): boolean;
    delete(key: string): boolean;
    clear(): void;
    size(): number;
}
export declare class MemoryCache implements ICache {
    private cache;
    private readonly defaultTTL;
    constructor(defaultTTL?: number);
    get(key: string): any;
    set(key: string, value: any, ttl?: number): void;
    has(key: string): boolean;
    delete(key: string): boolean;
    clear(): void;
    size(): number;
}
export declare function Cacheable(options?: ICacheOptions): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
export declare function InvalidateCache(keyGenerator?: (...args: any[]) => string | string[]): (_target: any, _propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
export declare const CacheManager: {
    clear: () => void;
    size: () => number;
    get: (key: string) => any;
    set: (key: string, value: any, ttl?: number) => void;
    delete: (key: string) => boolean;
    has: (key: string) => boolean;
};
export type { ICacheOptions as CacheOptions };
//# sourceMappingURL=index.d.ts.map