export interface IEventBus {
    emit(event: BaseEvent): void;
    on(eventType: string, handler: (event: BaseEvent) => void): void;
    off(eventType: string, handler?: (event: BaseEvent) => void): void;
}
export interface BaseEvent {
    type: string;
    timestamp: number;
    payload?: any;
}
export declare class EventBus implements IEventBus {
    private listeners;
    emit(event: BaseEvent): void;
    on(eventType: string, handler: (event: BaseEvent) => void): void;
    off(eventType: string, handler?: (event: BaseEvent) => void): void;
}
export declare class TestEventBus extends EventBus {
    private emittedEvents;
    emit(event: BaseEvent): void;
    getEmittedEvents(): BaseEvent[];
    clearEvents(): void;
    expectEvent(type: string): any;
}
export interface EmitsOptions {
    eventType?: string;
    payloadMapper?: (...args: any[]) => any;
}
export interface TracesOptions {
    threshold?: number;
    includeArgs?: boolean;
    includeResult?: boolean;
}
export declare function setEventBus(target: any, eventBus: IEventBus): void;
export declare function Emits(eventTypeOrOptions?: string | EmitsOptions, options?: EmitsOptions): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
export declare function Traces(options?: TracesOptions): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
//# sourceMappingURL=index.d.ts.map