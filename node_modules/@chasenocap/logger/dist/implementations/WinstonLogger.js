var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var WinstonLogger_1;
import { injectable } from 'inversify';
import * as winston from 'winston';
import DailyRotateFile from 'winston-daily-rotate-file';
import * as path from 'path';
let WinstonLogger = WinstonLogger_1 = class WinstonLogger {
    logger;
    context;
    config;
    constructor(context = {}, config = {}) {
        this.context = context;
        this.config = {
            service: 'h1b-logger',
            level: process.env['LOG_LEVEL'] || 'info',
            logDir: path.join(process.cwd(), 'logs'),
            maxFiles: '14d',
            maxSize: '10m',
            test: false,
            ...config,
        };
        this.logger = this.createLogger();
    }
    createLogger() {
        const transports = [
            new winston.transports.Console({
                format: winston.format.combine(winston.format.colorize(), winston.format.simple()),
            }),
        ];
        if (!this.config.test) {
            transports.push(new DailyRotateFile({
                dirname: this.config.logDir,
                filename: `${this.config.service}-%DATE%.log`,
                datePattern: 'YYYY-MM-DD',
                maxSize: this.config.maxSize,
                maxFiles: this.config.maxFiles,
            }));
        }
        return winston.createLogger({
            level: this.config.level,
            format: winston.format.combine(winston.format.timestamp(), winston.format.errors({ stack: true }), winston.format.json()),
            defaultMeta: { ...this.context, service: this.config.service },
            transports,
        });
    }
    debug(message, context) {
        this.logger.debug(message, { ...this.context, ...context });
    }
    info(message, context) {
        this.logger.info(message, { ...this.context, ...context });
    }
    warn(message, context) {
        this.logger.warn(message, { ...this.context, ...context });
    }
    error(message, error, context) {
        this.logger.error(message, {
            ...this.context,
            ...context,
            error: error
                ? {
                    message: error.message,
                    stack: error.stack,
                    name: error.name,
                }
                : undefined,
        });
    }
    child(context) {
        return new WinstonLogger_1({ ...this.context, ...context }, this.config);
    }
};
WinstonLogger = WinstonLogger_1 = __decorate([
    injectable(),
    __metadata("design:paramtypes", [Object, Object])
], WinstonLogger);
export { WinstonLogger };
//# sourceMappingURL=WinstonLogger.js.map